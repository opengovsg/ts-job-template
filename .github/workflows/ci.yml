name: ci
on:
  push:
  pull_request:
    types: [opened, reopened]
env:
  PRODUCTION_BRANCH: refs/heads/production
  STAGING_BRANCH: refs/heads/staging
jobs:
  ci:
    name: Lint
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npx lockfile-lint --type npm --path backend/package-lock.json --validate-https --allowed-hosts npm
      - run: npm run lint
  test:
    name: Test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npm run test
  gatekeep:
    name: Determine if Build & Deploy is needed
    outputs:
      proceed: ${{ steps.determine_proceed.outputs.proceed }}
    runs-on: ubuntu-18.04
    if: github.event_name == 'push'
    steps:
      - id: determine_proceed
        run: |
          if [[ -z "${AWS_ACCESS_KEY_ID}" || -z "${AWS_SECRET_ACCESS_KEY}"  ]]; then
            echo '::set-output name=proceed::false';
          elif [[ -z "${ECR_REPO}" || -z "${ECR_URL}"  ]]; then
            echo '::set-output name=proceed::false';
          elif [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo '::set-output name=proceed::true';
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo '::set-output name=proceed::true';
          else
            echo '::set-output name=proceed::false';
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REPO: ${{ secrets.ECR_REPO }}
          ECR_URL: ${{ secrets.ECR_URL }}
  build:
    name: Build and push
    runs-on: ubuntu-18.04
    outputs:
      tag: ${{ steps.extract_tag.outputs.tag }}
    needs: [gatekeep]
    steps:
      - uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Extract ECR tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ghactions-${BRANCH}-${SHA})"
        id: extract_tag
        env:
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
          SHA: ${{ github.sha }}
      - run: docker build -t ${{ steps.extract_tag.outputs.tag }} -f Dockerfile.production .
      - name: Push to ECR
        if: needs.gatekeep.outputs.proceed == 'true'
        uses: opengovsg/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ap-southeast-1
          local-image: ${{ steps.extract_tag.outputs.tag }}
          image: ${{ secrets.ECR_REPO }}:${{ steps.extract_tag.outputs.tag }}
  deploy-job01:
    name: Deploy Job01 to ECS
    runs-on: ubuntu-18.04
    needs: [ci, test, gatekeep, build]
    if: needs.gatekeep.outputs.proceed == 'true'
    steps:
      - name: Select task definiton and cluster variables
        run: |
          if [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo ECS_CLUSTER_NAME=${{ secrets.ECS_CLUSTER_NAME_STAGING }} >> $GITHUB_ENV;
            echo TASK_DEF=${{ secrets.TASK_DEF_JOB01_STAGING }} >> $GITHUB_ENV;
            echo RULE_PREFIX=${{ secrets.RULE_PREFIX_JOB01_STAGING }} >> $GITHUB_ENV;
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo ECS_CLUSTER_NAME=${{ secrets.ECS_CLUSTER_NAME_PRODUCTION }} >> $GITHUB_ENV;
            echo TASK_DEF=${{ secrets.TASK_DEF_JOB01_PRODUCTION }} >> $GITHUB_ENV;
            echo RULE_PREFIX=${{ secrets.RULE_PREFIX_JOB01_PRODUCTION }} >> $GITHUB_ENV;
          fi
        id: select_env_vars
      - name: Configure AWS credentials
        uses: opengovsg/gh-actions-configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEF }} --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: opengovsg/gh-actions-amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: run
          image: ${{ secrets.ECR_URL }}/${{ secrets.ECR_REPO }}:${{ needs.build.outputs.tag }}
      - name: Deploy Amazon ECS task definition
        uses: opengovsg/gh-actions-ecs-deploy-task-definition-to-scheduled-task@v2.1.1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          rule-prefix: ${{ env.RULE_PREFIX }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}

  # If you want to deploy a second job, uncomment this section
  # deploy-job02:
  #   name: Deploy Job02 to ECS
  #   runs-on: ubuntu-18.04
  #   needs: [ci, test, gatekeep, build]
  #   if: needs.gatekeep.outputs.proceed == 'true'
  #   steps:
  #     - name: Select task definiton and cluster variables
  #       run: |
  #         if [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
  #           echo ECS_CLUSTER_NAME=${{ secrets.ECS_CLUSTER_NAME_STAGING }} >> $GITHUB_ENV;
  #           echo TASK_DEF=${{ secrets.TASK_DEF_JOB02_STAGING }} >> $GITHUB_ENV;
  #           echo RULE_PREFIX=${{ secrets.RULE_PREFIX_JOB02_STAGING }} >> $GITHUB_ENV;
  #         elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
  #           echo ECS_CLUSTER_NAME=${{ secrets.ECS_CLUSTER_NAME_PRODUCTION }} >> $GITHUB_ENV;
  #           echo TASK_DEF=${{ secrets.TASK_DEF_JOB02_PRODUCTION }} >> $GITHUB_ENV;
  #           echo RULE_PREFIX=${{ secrets.RULE_PREFIX_JOB02_PRODUCTION }} >> $GITHUB_ENV;
  #         fi
  #       id: select_env_vars
  #     - name: Configure AWS credentials
  #       uses: opengovsg/gh-actions-configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-southeast-1
  #     - name: Download task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition ${{ env.TASK_DEF }} --query taskDefinition > task-definition.json
  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: opengovsg/gh-actions-amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: run
  #         image: ${{ secrets.ECR_URL }}/${{ secrets.ECR_REPO }}:${{ needs.build.outputs.tag }}
  #     - name: Deploy Amazon ECS task definition
  #       uses: opengovsg/gh-actions-ecs-deploy-task-definition-to-scheduled-task@v2.1.1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         rule-prefix: ${{ env.RULE_PREFIX }}
  #         cluster: ${{ env.ECS_CLUSTER_NAME }}
